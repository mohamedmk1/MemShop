// <auto-generated />
using MemShop.API.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MemShop.API.Migrations
{
    [DbContext(typeof(CategoryInfoContext))]
    partial class MemShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MemShop.API.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Desc Category 1",
                            Label = "Category 1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Desc Category 2",
                            Label = "Category 2"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Desc Category 3",
                            Label = "Category 3"
                        });
                });

            modelBuilder.Entity("MemShop.API.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "desc1",
                            Image = "image01.png",
                            Label = "Product 1",
                            Price = 13.449999999999999,
                            Reference = "ref01"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "desc2",
                            Image = "image02.png",
                            Label = "Product 2",
                            Price = 18.550000000000001,
                            Reference = "ref02"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "desc3",
                            Image = "image03.png",
                            Label = "Product 3",
                            Price = 20.254999999999999,
                            Reference = "ref03"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "desc4",
                            Image = "image04.png",
                            Label = "Product 4",
                            Price = 16.25,
                            Reference = "ref04"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Description = "desc5",
                            Image = "image05.png",
                            Label = "Product 5",
                            Price = 25.649999999999999,
                            Reference = "ref05"
                        });
                });

            modelBuilder.Entity("MemShop.API.Entities.Product", b =>
                {
                    b.HasOne("MemShop.API.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
